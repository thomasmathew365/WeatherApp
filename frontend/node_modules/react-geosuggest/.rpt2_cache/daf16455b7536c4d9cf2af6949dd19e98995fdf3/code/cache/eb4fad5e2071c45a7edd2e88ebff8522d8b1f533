{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport classnames from 'classnames';\r\nimport SuggestItem from './suggest-item';\r\n/**\r\n * The list with suggestions.\r\n */\r\nvar default_1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(default_1, _super);\r\n    function default_1() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Whether or not it is hidden\r\n     */\r\n    default_1.prototype.isHidden = function () {\r\n        return this.props.isHidden || this.props.suggests.length === 0;\r\n    };\r\n    /**\r\n     * There are new properties available for the list\r\n     */\r\n    default_1.prototype.componentWillReceiveProps = function (nextProps) {\r\n        if (nextProps.suggests !== this.props.suggests) {\r\n            if (nextProps.suggests.length === 0) {\r\n                this.props.onSuggestNoResults();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Render the view\r\n     * @return {Function} The React element to render\r\n     */\r\n    default_1.prototype.render = function () {\r\n        var _this = this;\r\n        var _a;\r\n        var classes = classnames('geosuggest__suggests', this.props.suggestsClassName, { 'geosuggest__suggests--hidden': this.isHidden() }, (_a = {},\r\n            _a[this.props.hiddenClassName || ''] = this.props.hiddenClassName\r\n                ? this.isHidden()\r\n                : null,\r\n            _a));\r\n        return (React.createElement(\"ul\", { className: classes, style: this.props.style }, this.props.suggests.map(function (suggest) {\r\n            var isActive = _this.props.activeSuggest &&\r\n                suggest.placeId === _this.props.activeSuggest.placeId || false;\r\n            return (React.createElement(SuggestItem, { key: suggest.placeId, className: suggest.className || '', userInput: _this.props.userInput, isHighlightMatch: _this.props.isHighlightMatch, suggest: suggest, style: _this.props.suggestItemStyle, suggestItemClassName: _this.props.suggestItemClassName, isActive: isActive, activeClassName: _this.props.suggestItemActiveClassName, onMouseDown: _this.props.onSuggestMouseDown, onMouseOut: _this.props.onSuggestMouseOut, onSelect: _this.props.onSuggestSelect, renderSuggestItem: _this.props.renderSuggestItem }));\r\n        })));\r\n    };\r\n    return default_1;\r\n}(React.PureComponent));\r\nexport default default_1;\r\n","dts":{"name":"/Users/robert/Entwicklung/react-geosuggest/src/suggest-list.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport ISuggest from './types/suggest';\r\ninterface IProps {\r\n    readonly isHidden: boolean;\r\n    readonly suggests: ISuggest[];\r\n    readonly suggestsClassName?: string;\r\n    readonly hiddenClassName?: string;\r\n    readonly suggestItemClassName?: string;\r\n    readonly suggestItemActiveClassName?: string;\r\n    readonly activeSuggest: ISuggest | null;\r\n    readonly style: any;\r\n    readonly suggestItemStyle: any;\r\n    readonly userInput: string;\r\n    readonly isHighlightMatch: boolean;\r\n    readonly onSuggestNoResults: () => void;\r\n    readonly renderSuggestItem?: (suggest: ISuggest, userInput: string) => JSX.Element | string;\r\n    readonly onSuggestSelect: (suggest: ISuggest) => void;\r\n    readonly onSuggestMouseDown: (event: React.MouseEvent) => void;\r\n    readonly onSuggestMouseOut: (event: React.MouseEvent) => void;\r\n}\r\n/**\r\n * The list with suggestions.\r\n */\r\nexport default class extends React.PureComponent<IProps, {}> {\r\n    /**\r\n     * Whether or not it is hidden\r\n     */\r\n    isHidden(): boolean;\r\n    /**\r\n     * There are new properties available for the list\r\n     */\r\n    componentWillReceiveProps(nextProps: IProps): void;\r\n    /**\r\n     * Render the view\r\n     * @return {Function} The React element to render\r\n     */\r\n    render(): JSX.Element;\r\n}\r\nexport {};\r\n"}}
