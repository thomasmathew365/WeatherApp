{"code":"/* global window */\r\nimport * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport classnames from 'classnames';\r\nimport debounce from 'lodash.debounce';\r\nimport defaults from './defaults';\r\nimport filterInputAttributes from './filter-input-attributes';\r\nimport Input from './input';\r\nimport SuggestList from './suggest-list';\r\n// Escapes special characters in user input for regex\r\nfunction escapeRegExp(str) {\r\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n}\r\n/**\r\n * Entry point for the Geosuggest component\r\n */\r\nvar default_1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(default_1, _super);\r\n    /**\r\n     * The constructor. Sets the initial state.\r\n     */\r\n    function default_1(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        /**\r\n         * The Google Map instance\r\n         */\r\n        _this.googleMaps = null;\r\n        /**\r\n         * The autocomple service to get suggests\r\n         */\r\n        _this.autocompleteService = null;\r\n        /**\r\n         * The geocoder to get geocoded results\r\n         */\r\n        _this.geocoder = null;\r\n        /**\r\n         * The input component\r\n         */\r\n        _this.input = null;\r\n        _this.state = {\r\n            activeSuggest: null,\r\n            ignoreBlur: false,\r\n            isLoading: false,\r\n            isSuggestsHidden: true,\r\n            suggests: [],\r\n            userInput: props.initialValue || ''\r\n        };\r\n        _this.onInputChange = _this.onInputChange.bind(_this);\r\n        _this.onAfterInputChange = _this.onAfterInputChange.bind(_this);\r\n        _this.onInputFocus = _this.onInputFocus.bind(_this);\r\n        _this.onInputBlur = _this.onInputBlur.bind(_this);\r\n        _this.onNext = _this.onNext.bind(_this);\r\n        _this.onPrev = _this.onPrev.bind(_this);\r\n        _this.onSelect = _this.onSelect.bind(_this);\r\n        _this.onSuggestMouseDown = _this.onSuggestMouseDown.bind(_this);\r\n        _this.onSuggestMouseOut = _this.onSuggestMouseOut.bind(_this);\r\n        _this.onSuggestNoResults = _this.onSuggestNoResults.bind(_this);\r\n        _this.hideSuggests = _this.hideSuggests.bind(_this);\r\n        _this.selectSuggest = _this.selectSuggest.bind(_this);\r\n        if (props.queryDelay) {\r\n            _this.onAfterInputChange = debounce(_this.onAfterInputChange, props.queryDelay);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Change inputValue if prop changes\r\n     */\r\n    default_1.prototype.componentWillReceiveProps = function (props) {\r\n        if (this.props.initialValue !== props.initialValue) {\r\n            this.setState({ userInput: props.initialValue || '' });\r\n        }\r\n    };\r\n    /**\r\n     * Called on the client side after component is mounted.\r\n     * Google api sdk object will be obtained and cached as a instance property.\r\n     * Necessary objects of google api will also be determined and saved.\r\n     */\r\n    default_1.prototype.componentWillMount = function () {\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        var googleMaps = this.props.googleMaps ||\r\n            (window.google &&\r\n                window.google.maps) ||\r\n            this.googleMaps;\r\n        /* istanbul ignore next */\r\n        if (!googleMaps) {\r\n            if (console) {\r\n                // tslint:disable-next-line:no-console\r\n                console.error('Google maps API was not found in the page.');\r\n            }\r\n            return;\r\n        }\r\n        this.googleMaps = googleMaps;\r\n        this.autocompleteService = new googleMaps.places.AutocompleteService();\r\n        this.geocoder = new googleMaps.Geocoder();\r\n    };\r\n    /**\r\n     * When the component will unmount\r\n     */\r\n    default_1.prototype.componentWillUnmount = function () {\r\n        clearTimeout(this.timer);\r\n    };\r\n    /**\r\n     * When the input changed\r\n     */\r\n    default_1.prototype.onInputChange = function (userInput) {\r\n        if (!userInput) {\r\n            if (this.props.onSuggestSelect) {\r\n                this.props.onSuggestSelect();\r\n            }\r\n        }\r\n        this.setState({ userInput: userInput }, this.onAfterInputChange);\r\n    };\r\n    /**\r\n     * On After the input got changed\r\n     */\r\n    default_1.prototype.onAfterInputChange = function () {\r\n        this.showSuggests();\r\n        if (this.props.onChange) {\r\n            this.props.onChange(this.state.userInput);\r\n        }\r\n    };\r\n    /**\r\n     * When the input gets focused\r\n     */\r\n    default_1.prototype.onInputFocus = function () {\r\n        if (this.props.onFocus) {\r\n            this.props.onFocus();\r\n        }\r\n        this.showSuggests();\r\n    };\r\n    /**\r\n     * When the input gets blurred\r\n     */\r\n    default_1.prototype.onInputBlur = function () {\r\n        if (!this.state.ignoreBlur) {\r\n            this.hideSuggests();\r\n        }\r\n    };\r\n    default_1.prototype.onNext = function () {\r\n        this.activateSuggest('next');\r\n    };\r\n    default_1.prototype.onPrev = function () {\r\n        this.activateSuggest('prev');\r\n    };\r\n    default_1.prototype.onSelect = function () {\r\n        this.selectSuggest(this.state.activeSuggest);\r\n    };\r\n    default_1.prototype.onSuggestMouseDown = function () {\r\n        this.setState({ ignoreBlur: true });\r\n    };\r\n    default_1.prototype.onSuggestMouseOut = function () {\r\n        this.setState({ ignoreBlur: false });\r\n    };\r\n    default_1.prototype.onSuggestNoResults = function () {\r\n        if (this.props.onSuggestNoResults) {\r\n            this.props.onSuggestNoResults(this.state.userInput);\r\n        }\r\n    };\r\n    /**\r\n     * Focus the input\r\n     */\r\n    default_1.prototype.focus = function () {\r\n        if (this.input) {\r\n            this.input.focus();\r\n        }\r\n    };\r\n    /**\r\n     * Blur the input\r\n     */\r\n    default_1.prototype.blur = function () {\r\n        if (this.input) {\r\n            this.input.blur();\r\n        }\r\n    };\r\n    /**\r\n     * Update the value of the user input\r\n     */\r\n    default_1.prototype.update = function (userInput) {\r\n        this.setState({ userInput: userInput });\r\n        if (this.props.onChange) {\r\n            this.props.onChange(userInput);\r\n        }\r\n    };\r\n    /*\r\n     * Clear the input and close the suggestion pane\r\n     */\r\n    default_1.prototype.clear = function () {\r\n        this.setState({ userInput: '' }, this.hideSuggests);\r\n    };\r\n    /**\r\n     * Search for new suggests\r\n     */\r\n    default_1.prototype.searchSuggests = function () {\r\n        var _this = this;\r\n        if (!this.state.userInput) {\r\n            this.updateSuggests();\r\n            return;\r\n        }\r\n        var options = {\r\n            input: this.state.userInput\r\n        };\r\n        var inputLength = this.state.userInput.length;\r\n        var isShorterThanMinLength = this.props.minLength && inputLength < this.props.minLength;\r\n        if (isShorterThanMinLength) {\r\n            return;\r\n        }\r\n        var _a = this.props, location = _a.location, radius = _a.radius, bounds = _a.bounds, types = _a.types, country = _a.country;\r\n        /* tslint:disable:curly */\r\n        if (location)\r\n            options.location = location;\r\n        if (radius)\r\n            options.radius = Number(this.props.radius);\r\n        if (bounds)\r\n            options.bounds = bounds;\r\n        if (types)\r\n            options.types = types;\r\n        if (country)\r\n            options.componentRestrictions = { country: country };\r\n        /* tslint:enable:curly */\r\n        this.setState({ isLoading: true }, function () {\r\n            if (!_this.autocompleteService) {\r\n                _this.setState({ isLoading: false });\r\n                return;\r\n            }\r\n            _this.autocompleteService.getPlacePredictions(options, function (suggestsGoogle) {\r\n                _this.setState({ isLoading: false });\r\n                _this.updateSuggests(suggestsGoogle || [], // can be null\r\n                function () {\r\n                    if (_this.props.autoActivateFirstSuggest &&\r\n                        !_this.state.activeSuggest) {\r\n                        _this.activateSuggest('next');\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the suggests\r\n     */\r\n    default_1.prototype.updateSuggests = function (suggestsGoogle, \r\n    // tslint:disable-next-line:no-empty\r\n    callback) {\r\n        var _this = this;\r\n        if (suggestsGoogle === void 0) { suggestsGoogle = []; }\r\n        if (callback === void 0) { \r\n        // tslint:disable-next-line:no-empty\r\n        callback = function () { }; }\r\n        var suggests = [];\r\n        var userInput = this.state.userInput;\r\n        var _a = this.props, skipSuggest = _a.skipSuggest, maxFixtures = _a.maxFixtures, fixtures = _a.fixtures;\r\n        var regex = new RegExp(escapeRegExp(userInput), 'gim');\r\n        var fixturesSearched = 0;\r\n        var activeSuggest = null;\r\n        if (fixtures) {\r\n            fixtures.forEach(function (fixture) {\r\n                if (maxFixtures && fixturesSearched >= maxFixtures) {\r\n                    return;\r\n                }\r\n                if ((skipSuggest && !skipSuggest(fixture)) && fixture.label.match(regex)) {\r\n                    fixturesSearched++;\r\n                    suggests.push({\r\n                        className: fixture.className,\r\n                        isFixture: true,\r\n                        label: fixture.label,\r\n                        location: fixture.location,\r\n                        matchedSubstrings: {\r\n                            length: userInput.length,\r\n                            offset: fixture.label.indexOf(userInput)\r\n                        },\r\n                        placeId: fixture.label\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        suggestsGoogle.forEach(function (suggest) {\r\n            if (skipSuggest && !skipSuggest(suggest)) {\r\n                suggests.push({\r\n                    description: suggest.description,\r\n                    isFixture: false,\r\n                    label: _this.props.getSuggestLabel ? _this.props.getSuggestLabel(suggest) : '',\r\n                    matchedSubstrings: suggest.matched_substrings[0],\r\n                    placeId: suggest.place_id\r\n                });\r\n            }\r\n        });\r\n        activeSuggest = this.updateActiveSuggest(suggests);\r\n        if (this.props.onUpdateSuggests) {\r\n            this.props.onUpdateSuggests(suggests, activeSuggest);\r\n        }\r\n        this.setState({ suggests: suggests, activeSuggest: activeSuggest }, callback);\r\n    };\r\n    /**\r\n     * Return the new activeSuggest object after suggests have been updated\r\n     */\r\n    default_1.prototype.updateActiveSuggest = function (suggests) {\r\n        if (suggests === void 0) { suggests = []; }\r\n        var activeSuggest = this.state.activeSuggest;\r\n        if (activeSuggest) {\r\n            var newSuggest = suggests.filter(function (listedSuggest) { return activeSuggest &&\r\n                activeSuggest.placeId === listedSuggest.placeId &&\r\n                activeSuggest.isFixture === listedSuggest.isFixture; })[0];\r\n            activeSuggest = newSuggest || null;\r\n        }\r\n        return activeSuggest;\r\n    };\r\n    /**\r\n     * Show the suggestions\r\n     */\r\n    default_1.prototype.showSuggests = function () {\r\n        this.searchSuggests();\r\n        this.setState({ isSuggestsHidden: false });\r\n    };\r\n    /**\r\n     * Hide the suggestions\r\n     */\r\n    default_1.prototype.hideSuggests = function () {\r\n        var _this = this;\r\n        if (this.props.onBlur) {\r\n            this.props.onBlur(this.state.userInput);\r\n        }\r\n        this.timer = window.setTimeout(function () {\r\n            _this.setState({\r\n                activeSuggest: null,\r\n                isSuggestsHidden: true\r\n            });\r\n        }, 100);\r\n    };\r\n    /**\r\n     * Activate a new suggest\r\n     */\r\n    default_1.prototype.activateSuggest = function (direction) {\r\n        if (this.state.isSuggestsHidden) {\r\n            this.showSuggests();\r\n            return;\r\n        }\r\n        var suggestsCount = this.state.suggests.length - 1;\r\n        var next = direction === 'next';\r\n        var newActiveSuggest = null;\r\n        var newIndex = 0;\r\n        var i = 0;\r\n        for (i; i <= suggestsCount; i++) {\r\n            if (this.state.suggests[i] === this.state.activeSuggest) {\r\n                newIndex = next ? i + 1 : i - 1;\r\n            }\r\n        }\r\n        if (!this.state.activeSuggest) {\r\n            newIndex = next ? 0 : suggestsCount;\r\n        }\r\n        if (newIndex >= 0 && newIndex <= suggestsCount) {\r\n            newActiveSuggest = this.state.suggests[newIndex];\r\n        }\r\n        if (this.props.onActivateSuggest) {\r\n            this.props.onActivateSuggest(newActiveSuggest);\r\n        }\r\n        this.setState({ activeSuggest: newActiveSuggest });\r\n    };\r\n    /**\r\n     * When an item got selected\r\n     */\r\n    default_1.prototype.selectSuggest = function (suggestToSelect) {\r\n        var suggest = suggestToSelect || {\r\n            isFixture: false,\r\n            label: this.state.userInput,\r\n            placeId: this.state.userInput\r\n        };\r\n        this.setState({\r\n            isSuggestsHidden: true,\r\n            userInput: typeof suggest.label !== 'object' ? suggest.label : (suggest.description || '')\r\n        });\r\n        if (suggest.location) {\r\n            this.setState({ ignoreBlur: false });\r\n            if (this.props.onSuggestSelect) {\r\n                this.props.onSuggestSelect(suggest);\r\n            }\r\n            return;\r\n        }\r\n        this.geocodeSuggest(suggest);\r\n    };\r\n    /**\r\n     * Geocode a suggest\r\n     */\r\n    default_1.prototype.geocodeSuggest = function (suggestToGeocode) {\r\n        var _this = this;\r\n        if (!this.geocoder) {\r\n            return;\r\n        }\r\n        var options = {};\r\n        if (suggestToGeocode.placeId && !suggestToGeocode.isFixture) {\r\n            options.placeId = suggestToGeocode.placeId;\r\n        }\r\n        else {\r\n            options = {\r\n                address: suggestToGeocode.label,\r\n                bounds: this.props.bounds,\r\n                componentRestrictions: this.props.country\r\n                    ? { country: this.props.country }\r\n                    : undefined,\r\n                location: this.props.location\r\n            };\r\n        }\r\n        this.geocoder.geocode(options, function (results, status) {\r\n            if (status === _this.googleMaps.GeocoderStatus.OK) {\r\n                var gmaps = results[0];\r\n                var location_1 = gmaps.geometry.location;\r\n                var suggest = tslib_1.__assign({}, suggestToGeocode, { gmaps: gmaps, location: {\r\n                        lat: location_1.lat(),\r\n                        lng: location_1.lng()\r\n                    } });\r\n                if (_this.props.onSuggestSelect) {\r\n                    _this.props.onSuggestSelect(suggest);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Render the view\r\n     */\r\n    default_1.prototype.render = function () {\r\n        var _this = this;\r\n        var attributes = filterInputAttributes(this.props);\r\n        var classes = classnames('geosuggest', this.props.className, {\r\n            'geosuggest--loading': this.state.isLoading\r\n        });\r\n        var shouldRenderLabel = this.props.label && attributes.id;\r\n        var input = (React.createElement(Input, tslib_1.__assign({ className: this.props.inputClassName, ref: function (i) { return (_this.input = i); }, value: this.state.userInput, doNotSubmitOnEnter: !this.state.isSuggestsHidden, ignoreTab: this.props.ignoreTab, ignoreEnter: this.props.ignoreEnter, style: this.props.style && this.props.style.input, onChange: this.onInputChange, onFocus: this.onInputFocus, onBlur: this.onInputBlur, onKeyDown: this.props.onKeyDown, onKeyPress: this.props.onKeyPress, onNext: this.onNext, onPrev: this.onPrev, onSelect: this.onSelect, onEscape: this.hideSuggests }, attributes)));\r\n        var suggestionsList = (React.createElement(SuggestList, { isHidden: this.state.isSuggestsHidden, style: this.props.style && this.props.style.suggests, suggestItemStyle: this.props.style && this.props.style.suggestItem, userInput: this.state.userInput, isHighlightMatch: Boolean(this.props.highlightMatch), suggestsClassName: this.props.suggestsClassName, suggestItemClassName: this.props.suggestItemClassName, suggests: this.state.suggests, hiddenClassName: this.props.suggestsHiddenClassName, suggestItemActiveClassName: this.props.suggestItemActiveClassName, activeSuggest: this.state.activeSuggest, onSuggestNoResults: this.onSuggestNoResults, onSuggestMouseDown: this.onSuggestMouseDown, onSuggestMouseOut: this.onSuggestMouseOut, onSuggestSelect: this.selectSuggest, renderSuggestItem: this.props.renderSuggestItem }));\r\n        return (React.createElement(\"div\", { className: classes },\r\n            React.createElement(\"div\", { className: \"geosuggest__input-wrapper\" },\r\n                shouldRenderLabel && (React.createElement(\"label\", { className: \"geosuggest__label\", htmlFor: attributes.id }, this.props.label)),\r\n                input),\r\n            React.createElement(\"div\", { className: \"geosuggest__suggests-wrapper\" }, suggestionsList)));\r\n    };\r\n    /**\r\n     * Default values for the properties\r\n     */\r\n    default_1.defaultProps = defaults;\r\n    return default_1;\r\n}(React.Component));\r\nexport default default_1;\r\n","dts":{"name":"/Users/robert/Entwicklung/react-geosuggest/src/Geosuggest.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport ISuggest from './types/suggest';\r\nimport IProps from './types/props';\r\ninterface IState {\r\n    readonly isSuggestsHidden: boolean;\r\n    readonly isLoading: boolean;\r\n    readonly ignoreBlur: boolean;\r\n    readonly userInput: string;\r\n    readonly activeSuggest: null | ISuggest;\r\n    readonly suggests: ISuggest[];\r\n}\r\n/**\r\n * Entry point for the Geosuggest component\r\n */\r\nexport default class extends React.Component<IProps, IState> {\r\n    /**\r\n     * Default values for the properties\r\n     */\r\n    protected static defaultProps: IProps;\r\n    /**\r\n     * The Google Map instance\r\n     */\r\n    private googleMaps;\r\n    /**\r\n     * The autocomple service to get suggests\r\n     */\r\n    private autocompleteService;\r\n    /**\r\n     * The geocoder to get geocoded results\r\n     */\r\n    private geocoder;\r\n    /**\r\n     * A timer\r\n     */\r\n    private timer?;\r\n    /**\r\n     * The input component\r\n     */\r\n    private input;\r\n    /**\r\n     * The constructor. Sets the initial state.\r\n     */\r\n    protected constructor(props: IProps);\r\n    /**\r\n     * Change inputValue if prop changes\r\n     */\r\n    componentWillReceiveProps(props: IProps): void;\r\n    /**\r\n     * Called on the client side after component is mounted.\r\n     * Google api sdk object will be obtained and cached as a instance property.\r\n     * Necessary objects of google api will also be determined and saved.\r\n     */\r\n    componentWillMount(): void;\r\n    /**\r\n     * When the component will unmount\r\n     */\r\n    componentWillUnmount(): void;\r\n    /**\r\n     * When the input changed\r\n     */\r\n    private onInputChange;\r\n    /**\r\n     * On After the input got changed\r\n     */\r\n    private onAfterInputChange;\r\n    /**\r\n     * When the input gets focused\r\n     */\r\n    private onInputFocus;\r\n    /**\r\n     * When the input gets blurred\r\n     */\r\n    private onInputBlur;\r\n    private onNext;\r\n    private onPrev;\r\n    private onSelect;\r\n    private onSuggestMouseDown;\r\n    private onSuggestMouseOut;\r\n    private onSuggestNoResults;\r\n    /**\r\n     * Focus the input\r\n     */\r\n    focus(): void;\r\n    /**\r\n     * Blur the input\r\n     */\r\n    blur(): void;\r\n    /**\r\n     * Update the value of the user input\r\n     */\r\n    update(userInput: string): void;\r\n    clear(): void;\r\n    /**\r\n     * Search for new suggests\r\n     */\r\n    private searchSuggests;\r\n    /**\r\n     * Update the suggests\r\n     */\r\n    private updateSuggests;\r\n    /**\r\n     * Return the new activeSuggest object after suggests have been updated\r\n     */\r\n    private updateActiveSuggest;\r\n    /**\r\n     * Show the suggestions\r\n     */\r\n    private showSuggests;\r\n    /**\r\n     * Hide the suggestions\r\n     */\r\n    private hideSuggests;\r\n    /**\r\n     * Activate a new suggest\r\n     */\r\n    private activateSuggest;\r\n    /**\r\n     * When an item got selected\r\n     */\r\n    private selectSuggest;\r\n    /**\r\n     * Geocode a suggest\r\n     */\r\n    private geocodeSuggest;\r\n    /**\r\n     * Render the view\r\n     */\r\n    render(): JSX.Element;\r\n}\r\nexport {};\r\n"}}
