{"version":3,"file":"index.cjs.js","sources":["../src/minify-utils.js","../src/minify.js","../src/label.js","../src/source-maps.js","../src/get-target-class-name.js","../src/object-to-string.js","../src/index.js"],"sourcesContent":["// @flow\n// babel-plugin-styled-components\n// https://github.com/styled-components/babel-plugin-styled-components/blob/8d44acc36f067d60d4e09f9c22ff89695bc332d2/src/minify/index.js\n\nconst multilineCommentRegex = /\\/\\*[^!](.|[\\r\\n])*?\\*\\//g\nconst lineCommentStart = /\\/\\//g\nconst symbolRegex = /(\\s*[;:{},]\\s*)/g\n\n// Counts occurences of substr inside str\nconst countOccurences = (str, substr) => str.split(substr).length - 1\n\n// Joins substrings until predicate returns true\nconst reduceSubstr = (substrs, join, predicate) => {\n  const length = substrs.length\n  let res = substrs[0]\n\n  if (length === 1) {\n    return res\n  }\n\n  for (let i = 1; i < length; i++) {\n    if (predicate(res)) {\n      break\n    }\n\n    res += join + substrs[i]\n  }\n\n  return res\n}\n\n// Joins at comment starts when it's inside a string or parantheses\n// effectively removing line comments\nexport const stripLineComment = (line: string) =>\n  reduceSubstr(\n    line.split(lineCommentStart),\n    '//',\n    str =>\n      !str.endsWith(':') && // NOTE: This is another guard against urls, if they're not inside strings or parantheses.\n      countOccurences(str, \"'\") % 2 === 0 &&\n      countOccurences(str, '\"') % 2 === 0 &&\n      countOccurences(str, '(') === countOccurences(str, ')')\n  )\n\nexport const compressSymbols = (code: string) =>\n  code.split(symbolRegex).reduce((str, fragment, index) => {\n    // Even-indices are non-symbol fragments\n    if (index % 2 === 0) {\n      return str + fragment\n    }\n\n    // Only manipulate symbols outside of strings\n    if (\n      countOccurences(str, \"'\") % 2 === 0 &&\n      countOccurences(str, '\"') % 2 === 0\n    ) {\n      return str + fragment.trim()\n    }\n\n    return str + fragment\n  }, '')\n\n// Detects lines that are exclusively line comments\nconst isLineComment = line => line.trim().startsWith('//')\nconst linebreakRegex = /[\\r\\n]\\s*/g\n\nexport const minify = (code: string) => {\n  const newCode = code\n    .replace(multilineCommentRegex, '\\n') // Remove multiline comments\n    .split(linebreakRegex) // Split at newlines\n    .filter(line => line.length > 0 && !isLineComment(line)) // Removes lines containing only line comments\n    .map(stripLineComment) // Remove line comments inside text\n    .join(' ') // Rejoin all lines\n\n  return compressSymbols(newCode)\n}\n","// @flow\nimport { minify } from './minify-utils'\n\nexport function getExpressionsFromTemplateLiteral(node: *, t: *): Array<*> {\n  const raw = createRawStringFromTemplateLiteral(node)\n  const minified = minify(raw)\n  return replacePlaceholdersWithExpressions(minified, node.expressions || [], t)\n}\n\nconst interleave = (strings: Array<*>, interpolations: Array<*>) =>\n  interpolations.reduce(\n    (array, interp, i) => array.concat([interp], strings[i + 1]),\n    [strings[0]]\n  )\n\nfunction getDynamicMatches(str: string) {\n  const re = /xxx(\\d+)xxx/gm\n  let match\n  const matches = []\n  while ((match = re.exec(str)) !== null) {\n    matches.push({\n      value: match[0],\n      p1: parseInt(match[1], 10),\n      index: match.index\n    })\n  }\n\n  return matches\n}\n\nfunction replacePlaceholdersWithExpressions(\n  str: string,\n  expressions: Array<*>,\n  t: *\n) {\n  const matches = getDynamicMatches(str)\n  if (matches.length === 0) {\n    if (str === '') {\n      return []\n    }\n    return [t.stringLiteral(str)]\n  }\n  const strings = []\n  const finalExpressions = []\n  let cursor = 0\n\n  matches.forEach(({ value, p1, index }, i) => {\n    const preMatch = str.substring(cursor, index)\n    cursor = cursor + preMatch.length + value.length\n    if (preMatch) {\n      strings.push(t.stringLiteral(preMatch))\n    } else if (i === 0) {\n      strings.push(t.stringLiteral(''))\n    }\n\n    finalExpressions.push(expressions[p1])\n    if (i === matches.length - 1) {\n      strings.push(t.stringLiteral(str.substring(index + value.length)))\n    }\n  })\n\n  return interleave(strings, finalExpressions).filter(\n    // $FlowFixMe\n    (node: StringLiteral) => {\n      return node.value !== ''\n    }\n  )\n}\n\nfunction createRawStringFromTemplateLiteral(quasi: {\n  quasis: Array<{ value: { cooked: string } }>\n}) {\n  let strs = quasi.quasis.map(x => x.value.cooked)\n\n  const src = strs\n    .reduce((arr, str, i) => {\n      arr.push(str)\n      if (i !== strs.length - 1) {\n        arr.push(`xxx${i}xxx`)\n      }\n      return arr\n    }, [])\n    .join('')\n    .trim()\n  return src\n}\n","// @flow\nexport function getLabelFromPath(path: *, t: *) {\n  return getIdentifierName(path, t)\n}\n\nfunction getDeclaratorName(path, t) {\n  // $FlowFixMe\n  const parent = path.findParent(p => p.isVariableDeclarator())\n  return parent && t.isIdentifier(parent.node.id) ? parent.node.id.name : ''\n}\n\nfunction getIdentifierName(path, t) {\n  let classOrClassPropertyParent\n\n  if (\n    t.isObjectProperty(path.parentPath) &&\n    path.parentPath.node.computed === false &&\n    (t.isIdentifier(path.parentPath.node.key) ||\n      t.isStringLiteral(path.parentPath.node.key))\n  ) {\n    return path.parentPath.node.key.name || path.parentPath.node.key.value\n  }\n\n  if (path) {\n    // $FlowFixMe\n    classOrClassPropertyParent = path.findParent(\n      p => t.isClassProperty(p) || t.isClass(p)\n    )\n  }\n  if (classOrClassPropertyParent) {\n    if (\n      t.isClassProperty(classOrClassPropertyParent) &&\n      classOrClassPropertyParent.node.computed === false &&\n      t.isIdentifier(classOrClassPropertyParent.node.key)\n    ) {\n      return classOrClassPropertyParent.node.key.name\n    }\n    if (\n      t.isClass(classOrClassPropertyParent) &&\n      classOrClassPropertyParent.node.id\n    ) {\n      return t.isIdentifier(classOrClassPropertyParent.node.id)\n        ? classOrClassPropertyParent.node.id.name\n        : ''\n    }\n  }\n\n  let declaratorName = getDeclaratorName(path, t)\n  // if the name starts with _ it was probably generated by babel so we should ignore it\n  if (declaratorName.charAt(0) === '_') {\n    return ''\n  }\n  return declaratorName\n}\n","// @flow\nimport { SourceMapGenerator } from 'source-map'\nimport convert from 'convert-source-map'\n\nfunction getGeneratorOpts(file) {\n  return file.opts.generatorOpts ? file.opts.generatorOpts : file.opts\n}\n\nexport function makeSourceMapGenerator(file: *) {\n  const generatorOpts = getGeneratorOpts(file)\n  const filename = generatorOpts.sourceFileName\n  const generator = new SourceMapGenerator({\n    file: filename,\n    sourceRoot: generatorOpts.sourceRoot\n  })\n\n  generator.setSourceContent(filename, file.code)\n  return generator\n}\n\nexport function getSourceMap(\n  offset: {\n    line: number,\n    column: number\n  },\n  state: *\n) {\n  const generator = makeSourceMapGenerator(state.file)\n  const generatorOpts = getGeneratorOpts(state.file)\n  generator.addMapping({\n    generated: {\n      line: 1,\n      column: 0\n    },\n    source: generatorOpts.sourceFileName,\n    original: offset\n  })\n  return convert.fromObject(generator).toComment({ multiline: true })\n}\n","// @flow\nimport findRoot from 'find-root'\nimport memoize from '@emotion/memoize'\nimport nodePath from 'path'\nimport hashString from '@emotion/hash'\n\nlet hashArray = (arr: Array<string>) => hashString(arr.join(''))\n\nconst unsafeRequire = require\n\nconst getPackageRootPath = memoize(filename => findRoot(filename))\n\nexport function getTargetClassName(state: *, t: *) {\n  if (state.emotionTargetClassNameCount === undefined) {\n    state.emotionTargetClassNameCount = 0\n  }\n\n  const filename = state.file.opts.filename\n\n  // normalize the file path to ignore folder structure\n  // outside the current node project and arch-specific delimiters\n  let moduleName = ''\n  let rootPath = filename\n\n  try {\n    rootPath = getPackageRootPath(filename)\n    moduleName = unsafeRequire(rootPath + '/package.json').name\n  } catch (err) {}\n\n  const finalPath =\n    filename === rootPath\n      ? nodePath.basename(filename)\n      : filename.slice(rootPath.length)\n\n  const positionInFile = state.emotionTargetClassNameCount++\n\n  const stuffToHash = [moduleName]\n\n  if (finalPath) {\n    stuffToHash.push(nodePath.normalize(finalPath))\n  } else {\n    stuffToHash.push(state.file.code)\n  }\n\n  const stableClassName = `e${hashArray(stuffToHash)}${positionInFile}`\n\n  return stableClassName\n}\n","// @flow\nimport { handleInterpolation } from '@emotion/serialize'\n\nexport function simplifyObject(node: *, t: Object) {\n  let bailout = false\n  let finalString = ''\n  node.properties.forEach(property => {\n    if (bailout) {\n      return\n    }\n    if (\n      property.computed ||\n      (!t.isIdentifier(property.key) && !t.isStringLiteral(property.key)) ||\n      (!t.isStringLiteral(property.value) &&\n        !t.isNumericLiteral(property.value) &&\n        !t.isObjectExpression(property.value))\n    ) {\n      bailout = true\n    }\n\n    let key = property.key.name || property.key.value\n    if (key === 'styles') {\n      bailout = true\n      return\n    }\n    if (t.isObjectExpression(property.value)) {\n      let simplifiedChild = simplifyObject(property.value, t)\n      if (!t.isStringLiteral(simplifiedChild)) {\n        bailout = true\n        return\n      }\n      finalString += `${key}{${simplifiedChild.value}}`\n      return\n    }\n    let value = property.value.value\n\n    finalString += handleInterpolation({}, { [key]: value })\n  })\n  return bailout ? node : t.stringLiteral(finalString)\n}\n","// @flow\nexport { getExpressionsFromTemplateLiteral } from './minify'\nexport { getLabelFromPath } from './label'\nexport { getSourceMap } from './source-maps'\nexport { getTargetClassName } from './get-target-class-name'\nexport { simplifyObject } from './object-to-string'\n\nexport const appendStringToExpressions = (\n  expressions: Array<*>,\n  string: string,\n  t: *\n) => {\n  if (!string) {\n    return expressions\n  }\n  if (t.isStringLiteral(expressions[expressions.length - 1])) {\n    expressions[expressions.length - 1].value += string\n  } else {\n    expressions.push(t.stringLiteral(string))\n  }\n  return expressions\n}\n\nexport const joinStringLiterals = (expressions: Array<*>, t: *) => {\n  return expressions.reduce((finalExpressions, currentExpression, i) => {\n    if (!t.isStringLiteral(currentExpression)) {\n      finalExpressions.push(currentExpression)\n    } else if (\n      t.isStringLiteral(finalExpressions[finalExpressions.length - 1])\n    ) {\n      finalExpressions[finalExpressions.length - 1].value +=\n        currentExpression.value\n    } else {\n      finalExpressions.push(currentExpression)\n    }\n    return finalExpressions\n  }, [])\n}\n"],"names":["multilineCommentRegex","lineCommentStart","symbolRegex","countOccurences","str","substr","split","length","reduceSubstr","substrs","join","predicate","res","i","stripLineComment","line","endsWith","compressSymbols","code","reduce","fragment","index","trim","isLineComment","startsWith","linebreakRegex","minify","newCode","replace","filter","map","getExpressionsFromTemplateLiteral","node","t","raw","createRawStringFromTemplateLiteral","minified","replacePlaceholdersWithExpressions","expressions","interleave","strings","interpolations","array","interp","concat","getDynamicMatches","re","match","matches","exec","push","parseInt","stringLiteral","finalExpressions","cursor","forEach","value","p1","preMatch","substring","quasi","strs","quasis","x","cooked","src","arr","getLabelFromPath","path","getIdentifierName","getDeclaratorName","parent","findParent","p","isVariableDeclarator","isIdentifier","id","name","classOrClassPropertyParent","isObjectProperty","parentPath","computed","key","isStringLiteral","isClassProperty","isClass","declaratorName","charAt","getGeneratorOpts","file","opts","generatorOpts","makeSourceMapGenerator","filename","sourceFileName","generator","SourceMapGenerator","sourceRoot","setSourceContent","getSourceMap","offset","state","addMapping","convert","fromObject","toComment","hashArray","hashString","unsafeRequire","require","getPackageRootPath","memoize","findRoot","getTargetClassName","emotionTargetClassNameCount","undefined","moduleName","rootPath","err","finalPath","nodePath","basename","slice","positionInFile","stuffToHash","normalize","stableClassName","simplifyObject","bailout","finalString","properties","property","isNumericLiteral","isObjectExpression","simplifiedChild","handleInterpolation","appendStringToExpressions","string","joinStringLiterals","currentExpression"],"mappings":"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"}