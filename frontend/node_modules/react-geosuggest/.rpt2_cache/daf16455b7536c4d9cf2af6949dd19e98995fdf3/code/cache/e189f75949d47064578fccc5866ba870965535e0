{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport classnames from 'classnames';\r\nimport filterInputAttributes from './filter-input-attributes';\r\n/**\r\n * The input field\r\n */\r\nvar default_1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(default_1, _super);\r\n    /**\r\n     * The constructor.\r\n     */\r\n    function default_1(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        /* tslint:enable:no-empty */\r\n        /**\r\n         * The reference to the input element\r\n         */\r\n        _this.input = null;\r\n        _this.onChange = _this.onChange.bind(_this);\r\n        _this.onInputKeyDown = _this.onInputKeyDown.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * When the input got changed\r\n     */\r\n    default_1.prototype.onChange = function () {\r\n        if (this.input) {\r\n            this.props.onChange(this.input.value);\r\n        }\r\n    };\r\n    /**\r\n     * When a key gets pressed in the input\r\n     */\r\n    default_1.prototype.onInputKeyDown = function (event) {\r\n        // Call props.onKeyDown if defined\r\n        // Gives the developer a little bit more control if needed\r\n        if (this.props.onKeyDown) {\r\n            this.props.onKeyDown(event);\r\n        }\r\n        switch (event.which) {\r\n            case 40: // DOWN\r\n                if (!event.shiftKey) {\r\n                    event.preventDefault();\r\n                    this.props.onNext();\r\n                }\r\n                break;\r\n            case 38: // UP\r\n                if (!event.shiftKey) {\r\n                    event.preventDefault();\r\n                    this.props.onPrev();\r\n                }\r\n                break;\r\n            case 13: // ENTER\r\n                if (this.props.doNotSubmitOnEnter) {\r\n                    event.preventDefault();\r\n                }\r\n                if (!this.props.ignoreEnter) {\r\n                    this.props.onSelect();\r\n                }\r\n                break;\r\n            case 9: // TAB\r\n                if (!this.props.ignoreTab) {\r\n                    this.props.onSelect();\r\n                }\r\n                break;\r\n            case 27: // ESC\r\n                this.props.onEscape();\r\n                break;\r\n            /* istanbul ignore next */\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Focus the input\r\n     */\r\n    default_1.prototype.focus = function () {\r\n        if (this.input) {\r\n            this.input.focus();\r\n        }\r\n    };\r\n    /**\r\n     * Blur the input\r\n     */\r\n    default_1.prototype.blur = function () {\r\n        if (this.input) {\r\n            this.input.blur();\r\n        }\r\n    };\r\n    /**\r\n     * Render the view\r\n     */\r\n    default_1.prototype.render = function () {\r\n        var _this = this;\r\n        var attributes = filterInputAttributes(this.props);\r\n        var classes = classnames('geosuggest__input', this.props.className);\r\n        return (React.createElement(\"input\", tslib_1.__assign({ className: classes, ref: function (i) { return (_this.input = i); }, type: \"text\" }, attributes, { value: this.props.value, style: this.props.style, onKeyDown: this.onInputKeyDown, onChange: this.onChange, onKeyPress: this.props.onKeyPress, onFocus: this.props.onFocus, onBlur: this.props.onBlur })));\r\n    };\r\n    /* tslint:disable:no-empty */\r\n    /**\r\n     * Default values for the properties\r\n     */\r\n    default_1.defaultProps = {\r\n        autoComplete: 'nope',\r\n        className: '',\r\n        onBlur: function () { },\r\n        onChange: function () { },\r\n        onEscape: function () { },\r\n        onFocus: function () { },\r\n        onKeyDown: function () { },\r\n        onKeyPress: function () { },\r\n        onNext: function () { },\r\n        onPrev: function () { },\r\n        onSelect: function () { },\r\n        value: ''\r\n    };\r\n    return default_1;\r\n}(React.PureComponent));\r\nexport default default_1;\r\n","dts":{"name":"/Users/robert/Entwicklung/react-geosuggest/src/input.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\ninterface IProps {\r\n    readonly value: string;\r\n    readonly className?: string;\r\n    readonly doNotSubmitOnEnter?: boolean;\r\n    readonly ignoreEnter?: boolean;\r\n    readonly ignoreTab?: boolean;\r\n    readonly style?: any;\r\n    readonly autoComplete?: string;\r\n    readonly onChange: (value: string) => void;\r\n    readonly onSelect: () => void;\r\n    readonly onKeyDown?: (event: React.KeyboardEvent) => void;\r\n    readonly onKeyPress?: (event: React.KeyboardEvent) => void;\r\n    readonly onNext: () => void;\r\n    readonly onPrev: () => void;\r\n    readonly onEscape: () => void;\r\n    readonly onFocus: () => void;\r\n    readonly onBlur: () => void;\r\n}\r\n/**\r\n * The input field\r\n */\r\nexport default class extends React.PureComponent<IProps, {}> {\r\n    /**\r\n     * Default values for the properties\r\n     */\r\n    static defaultProps: IProps;\r\n    /**\r\n     * The reference to the input element\r\n     */\r\n    input: HTMLInputElement | null;\r\n    /**\r\n     * The constructor.\r\n     */\r\n    constructor(props: IProps);\r\n    /**\r\n     * When the input got changed\r\n     */\r\n    onChange(): void;\r\n    /**\r\n     * When a key gets pressed in the input\r\n     */\r\n    onInputKeyDown(event: React.KeyboardEvent): void;\r\n    /**\r\n     * Focus the input\r\n     */\r\n    focus(): void;\r\n    /**\r\n     * Blur the input\r\n     */\r\n    blur(): void;\r\n    /**\r\n     * Render the view\r\n     */\r\n    render(): JSX.Element;\r\n}\r\nexport {};\r\n"}}
